PUT _ingest/pipeline/elbaccess
{
  "description" : "elbaccess data ingestion",
  "processors":
    [
      {
        "set": {
          "value": "{{_ingest.timestamp}}",
          "field": "event.ingested"
        }
      },
      {
        "grok": {
          "field": "message",
          "patterns": [
              "%{ELBHTTPLOG}",
              "%{ELBTCPLOG}",
              "%{ELBV2TYPE} %{ELBHTTPLOG} %{NOTSPACE:aws.elb.target_group.arn} \\\"%{DATA:aws.elb.trace_id}\\\" \\\"(?:-|%{DATA:destination.domain})\\\" \\\"(?:-|%{DATA:aws.elb.chosen_cert.arn})\\\" (?:-1|%{NUMBER:aws.elb.matched_rule_priority}) %{TIMESTAMP_ISO8601:event.start} \\\"(?:-|%{DATA:_tmp.actions_executed})\\\" \\\"(?:-|%{DATA:aws.elb.redirect_url})\\\" \\\"(?:-|%{DATA:aws.elb.error.reason})\\\"( \\\"(?:-|%{DATA:_tmp.target_port})\\\")?( \\\"(?:-|%{DATA:_tmp.target_status_code})\\\")?( \\\"(?:-|%{DATA:aws.elb.classification})\\\")?( \\\"(?:-|%{DATA:aws.elb.classification_reason})\\\")?",
              "%{ELBV2TYPE} %{ELBV2LOGVERSION} %{ELBTIMESTAMP} %{ELBNAME} %{NOTSPACE:aws.elb.listener} %{ELBSOURCE} %{ELBBACKEND} %{NUMBER:aws.elb.connection_time.ms:float} %{NUMBER:aws.elb.tls_handshake_time.ms:float} %{NUMBER:source.bytes:long} %{NUMBER:destination.bytes:long} (?:-|%{NUMBER:aws.elb.incoming_tls_alert}) (?:-|%{NOTSPACE:aws.elb.chosen_cert.arn}) (?:-|%{NOTSPACE:aws.elb.chosen_cert.serial}) %{ELBSSL} (?:-|%{NOTSPACE:aws.elb.ssl_named_group}) (?:-|%{NOTSPACE:destination.domain})"
          ],
          "pattern_definitions": {
            "ELBCOMMON": "%{ELBTIMESTAMP} %{ELBNAME} %{ELBSOURCE} %{ELBBACKEND} %{ELBPROCESSINGTIME}",
            "ELBV2TYPE": "%{WORD:aws.elb.type}",
            "ELBV2LOGVERSION": "%{NOTSPACE}",
            "ELBSOURCE": "%{IP:source.ip}:%{POSINT:source.port}",
            "ELBBACKEND": "(?:-|%{IP:aws.elb.backend.ip}:%{POSINT:aws.elb.backend.port})",
            "ELBSSL": "(?:-|%{NOTSPACE:aws.elb.ssl_cipher}) (?:-|%{NOTSPACE:aws.elb.ssl_protocol})",
            "ELBPROCESSINGTIME": "(?:-1|%{NUMBER:aws.elb.request_processing_time.sec:float}) (?:-1|%{NUMBER:aws.elb.backend_processing_time.sec:float}) (?:-1|%{NUMBER:aws.elb.response_processing_time.sec:float})",
            "ELBHTTPLOG": "%{ELBCOMMON} %{NUMBER:http.response.status_code:long} (?:-|%{NUMBER:aws.elb.backend.http.response.status_code:long}) %{NUMBER:http.request.body.bytes:long} %{NUMBER:http.response.body.bytes:long} \\\"(?:-|%{WORD:http.request.method}) (?:-|%{NOTSPACE:http.request.referrer}) (?:-|HTTP/%{NOTSPACE:http.version})\\\" \\\"%{DATA:user_agent.original}\\\" %{ELBSSL}",
            "ELBTCPLOG": "%{ELBCOMMON} - - %{NUMBER:source.bytes:long} %{NUMBER:destination.bytes:long} \\\"- - - \\\" \\\"-\\\" %{ELBSSL}",
            "ELBTIMESTAMP": "%{TIMESTAMP_ISO8601:_tmp.timestamp}",
            "ELBNAME": "%{NOTSPACE:aws.elb.name}"
          }
        }
      },
      {
        "set": {
          "value": "event",
          "field": "event.kind"
        }
      },
      {
        "set": {
          "field": "cloud.provider",
          "value": "aws"
        }
      },
      {
        "set": {
          "field": "aws.elb.protocol",
          "value": "http",
          "if": "ctx.http != null"
        }
      },
      {
        "set": {
          "if": "ctx.http != null",
          "field": "event.category",
          "value": "web"
        }
      },
      {
        "set": {
          "if": "ctx.http == null",
          "field": "aws.elb.protocol",
          "value": "tcp"
        }
      },
      {
        "set": {
          "value": "network",
          "if": "ctx.http == null",
          "field": "event.category"
        }
      },
      {
        "set": {
          "if": "ctx?.http?.response?.status_code != null && ctx.http.response.status_code < 400",
          "field": "event.outcome",
          "value": "success"
        }
      },
      {
        "set": {
          "field": "event.outcome",
          "value": "failure",
          "if": "ctx?.http?.response?.status_code != null && ctx.http.response.status_code >= 400"
        }
      },
      {
        "set": {
          "field": "trace.id",
          "value": "{{aws.elb.trace_id}}",
          "ignore_empty_value": true
        }
      },
      {
        "split": {
          "target_field": "aws.elb.action_executed",
          "separator": ",",
          "ignore_missing": true,
          "field": "_tmp.actions_executed"
        }
      },
      {
        "split": {
          "separator": " ",
          "ignore_missing": true,
          "field": "_tmp.target_port",
          "target_field": "aws.elb.target_port"
        }
      },
      {
        "split": {
          "separator": " ",
          "ignore_missing": true,
          "field": "_tmp.target_status_code",
          "target_field": "aws.elb.target_status_code"
        }
      },
      {
        "date": {
          "field": "_tmp.timestamp",
          "formats": [
              "ISO8601"
          ]
        }
      },
      {
        "set": {
          "value": "{{ @timestamp }}",
          "ignore_empty_value": true,
          "field": "event.end"
        }
      },
      {
        "geoip": {
          "field": "source.ip",
          "target_field": "source.geo",
          "ignore_missing": true
        }
      },
      {
        "geoip": {
          "ignore_missing": true,
          "database_file": "GeoLite2-ASN.mmdb",
          "field": "source.ip",
          "target_field": "source.as",
          "properties": [
              "asn",
              "organization_name"
          ]
        }
      },
      {
        "rename": {
          "field": "source.as.asn",
          "target_field": "source.as.number",
          "ignore_missing": true
        }
      },
      {
        "rename": {
          "field": "source.as.organization_name",
          "target_field": "source.as.organization.name",
          "ignore_missing": true
        }
      },
      {
        "set": {
          "field": "tls.cipher",
          "value": "{{aws.elb.ssl_cipher}}",
          "ignore_empty_value": true
        }
      },
      {
        "script": {
          "source": "def parts = ctx.aws.elb.ssl_protocol.splitOnToken(\"v\"); if (parts.length != 2) {\n  return;\n} if (parts[1].contains(\".\")) {\n  ctx.tls.version = parts[1];\n} else {\n  ctx.tls.version = parts[1].substring(0,1) + \".\" + parts[1].substring(1);\n} ctx.tls.version_protocol = parts[0].toLowerCase();",
          "lang": "painless",
          "if": "ctx.aws?.elb?.ssl_protocol != null"
        }
      },
      {
        "remove": {
          "field": [
              "message",
              "_tmp"
          ],
          "ignore_missing": true
        }
      }
    ]
}


#PUT _template/elbaccess_1
#{
#  "index_patterns": ["elbaccess-*"],
#  "settings": {
#    "number_of_shards": 1
#  },
#  "mappings": {
#    "_source": {
#      "enabled": false
#    },
#    "properties": {
#      "@timestamp": {
#        "type": "date"
#      }
#    }
#  }
#}

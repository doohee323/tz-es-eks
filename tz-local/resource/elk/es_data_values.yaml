clusterName: "elasticsearch"
nodeGroup: "data"
roles:
  master: "false"
  ingest: "true"
  data: "true"
#  ml: "false"
#  remote_cluster_client: "false"

# Shrink default JVM heap.
#esJavaOpts: "-Xmx128m -Xms128m"

replicas: 2
minimumMasterNodes: 1

hostAliases: []
#- ip: "127.0.0.1"
#  hostnames:
#  - "foo.local"
#  - "bar.local"

networkHost: "0.0.0.0"

# Allocate smaller chunks of memory per pod.
resources:
  requests:
    cpu: "1000m"
    memory: "2Gi"
  limits:
    cpu: "1500m"
    memory: "4Gi"

# Request smaller persistent volumes.
volumeClaimTemplate:
  accessModes: [ "ReadWriteOnce" ]
  storageClassName: "gp2"
  resources:
    requests:
      storage: 100Gi

rbac:
  create: false
  serviceAccountAnnotations: {}
  serviceAccountName: ""

podSecurityPolicy:
  create: false
  name: ""
  spec:
    privileged: true
    fsGroup:
      rule: RunAsAny
    runAsUser:
      rule: RunAsAny
    seLinux:
      rule: RunAsAny
    supplementalGroups:
      rule: RunAsAny
    volumes:
      - secret
      - configMap
      - persistentVolumeClaim
      - emptyDir

# Permit co-located instances for solitary minikube virtual machines.
antiAffinity: "hard"

podManagementPolicy: "Parallel"

enableServiceLinks: true

#protocol: http
httpPort: 9200
transportPort: 9300

service:
  labels: {}
  labelsHeadless: {}
  type: ClusterIP
  nodePort: ""
  annotations: {}
  httpPortName: http
  transportPortName: transport
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: ""

updateStrategy: RollingUpdate

maxUnavailable: 1

podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 15
  successThreshold: 3
  timeoutSeconds: 10

clusterHealthCheckParams: 'wait_for_status=yellow&timeout=1s'

networkPolicy:
  http:
    enabled: true
  transport:
    enabled: true

sysctlInitContainer:
  enabled: false


protocol: https
esConfig:
  elasticsearch.yml: |
    xpack.license.self_generated.type: basic

    xpack.security.enabled: true
    xpack.security.transport.ssl.enabled: true
    xpack.security.transport.ssl.verification_mode: certificate

    xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
    xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
    xpack.security.http.ssl.enabled: true
    xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
    xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
    xpack.security.authc.realms.native.local.order: 0

    xpack.monitoring.enabled: true
    xpack.monitoring.collection.enabled: true
    xpack.ml.enabled: true
    xpack.graph.enabled: true
    xpack.watcher.enabled: true
    xpack.sql.enabled: true

    xpack.notification.email:
      default_account: elastic
      account:
        elastic:
          smtp:
            auth: true
            starttls.enable: true
            starttls.required: true
            host: smtp.gmail.com
            port: 587
            user: devops@tz.gg

    xpack.notification.email.account:
      gmail_account:
        profile: gmail
        smtp:
          auth: true
          starttls.enable: true
          starttls.required: true
          host: smtp.gmail.com
          port: 587
          user: devops@tz.gg

    xpack.notification.slack:
      account:
        monitoring:
          message_defaults:
            from: x-pack
            to: notifications
            icon: http://example.com/images/watcher-icon.jpg
            attachment:
              fallback: "X-Pack Notification"
              color: "#36a64f"
              title: "X-Pack Notification"
              title_link: "https://www.elastic.co/guide/en/x-pack/current/index.html"
              text: "One of your watches generated this notification."
              mrkdwn_in: "pretext, text"

extraEnvs:
  - name: ELASTIC_PASSWORD
    valueFrom:
      secretKeyRef:
        name: elastic-credentials
        key: password
  - name: ELASTIC_USERNAME
    valueFrom:
      secretKeyRef:
        name: elastic-credentials
        key: username

secretMounts:
  - name: elastic-certificates
    secretName: elastic-certificates
    path: /usr/share/elasticsearch/config/certs

extraInitContainers:
  - name: install-plugins
    securityContext:
      privileged: true
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
    imagePullPolicy: IfNotPresent
    env:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: aws-s3-keys
          key: access-key-id
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: aws-s3-keys
          key: access-secret-key
    command:
    - sh
    - -c
    - |
      /usr/bin/mkdir -p /usr/share/elasticsearch/.aws
      /bin/chmod -Rf 777 /usr/share/elasticsearch/.aws
      bin/elasticsearch-plugin install --batch repository-s3
      echo $AWS_ACCESS_KEY_ID | bin/elasticsearch-keystore add --stdin --force s3.client.default.access_key
      echo $AWS_SECRET_ACCESS_KEY | bin/elasticsearch-keystore add --stdin --force s3.client.default.secret_key
    volumeMounts:
    - name: plugins
      mountPath: /usr/share/elasticsearch/plugins

extraVolumes:
  - name: plugins
    emptyDir: {}
extraVolumeMounts:
  - name: plugins
    mountPath: /usr/share/elasticsearch/plugins
    readOnly: false

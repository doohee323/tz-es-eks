elasticsearchHosts: "https://elasticsearch-master:9200"

replicas: 1

extraEnvs:
  - name: ELASTIC_USERNAME
    valueFrom:
      secretKeyRef:
        name: elastic-credentials
        key: username
  - name: ELASTIC_PASSWORD
    valueFrom:
      secretKeyRef:
        name: elastic-credentials
        key: password
  - name: NODE_OPTIONS
    value: "--max-old-space-size=1800"

kibanaConfig:
  kibana.yml: |
    elasticsearch.hosts: "https://elasticsearch-master.elk.svc.cluster.local:9200"
    elasticsearch.ssl.verificationMode: "none"
    elasticsearch.username: ${ELASTIC_USERNAME}
    elasticsearch.password: ${ELASTIC_PASSWORD}
    xpack.security.session.idleTimeout: 30m
    xpack.security.audit.enabled: true
    enterpriseSearch.host: "https://elasticsearch-master.elk.svc.cluster.local:3002"

    xpack.encryptedSavedObjects.encryptionKey: aa577b2137923c4d5e7c94db27319f39
    xpack.reporting.encryptionKey: dc54b2346d58f62ac8f7df50bfe16979
    xpack.security.encryptionKey: 1713a9b9583f03ddbc637a21fefd872f

protocol: http

secretMounts:
  - name: elastic-certificates
    secretName: elastic-certificates
    path: /usr/share/kibana/config/certs

# Allows you to load environment variables from kubernetes secret or config map
envFrom: []
# - secretRef:
#     name: env-secret
# - configMapRef:
#     name: config-map

hostAliases: []
#- ip: "127.0.0.1"
#  hostnames:
#  - "foo.local"
#  - "bar.local"

image: "docker.elastic.co/kibana/kibana"
#imageTag: "8.0.0-SNAPSHOT"
imagePullPolicy: "IfNotPresent"

# additionals labels
labels: {}

podAnnotations: {}
  # iam.amazonaws.com/role: es-cluster

resources:
  requests:
    cpu: "1000m"
    memory: "2Gi"
  limits:
    cpu: "1000m"
    memory: "2Gi"

serverHost: "0.0.0.0"

healthCheckPath: "/app/kibana"

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

serviceAccount: ""

# This is the PriorityClass settings as defined in
# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: ""

httpPort: 5601

extraContainers: ""
# - name: dummy-init
#   image: busybox
#   command: ['echo', 'hey']

extraInitContainers: ""
# - name: dummy-init
#   image: busybox
#   command: ['echo', 'hey']

updateStrategy:
  type: "Recreate"

service:
  type: ClusterIP
  loadBalancerIP: ""
  port: 5601
  nodePort: ""
  labels: {}
  annotations: {}
    # cloud.google.com/load-balancer-type: "Internal"
    # service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    # service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    # service.beta.kubernetes.io/openstack-internal-load-balancer: "true"
    # service.beta.kubernetes.io/cce-load-balancer-internal-vpc: "true"
  loadBalancerSourceRanges: []
    # 0.0.0.0/0
  httpPortName: http

#ingress:
#  enabled: true
#  annotations:
#    kubernetes.io/ingress.class: "nginx"
#  hosts:
#    - host: kibana.elk.eks_project.ejntest.com
#      paths:
#      - path: /
#        backend:
#          serviceName: kibana-kibana
#          servicePort: 5601

readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 3
  timeoutSeconds: 5

imagePullSecrets: []
nodeSelector:
  team: "TEAM"
  environment: "STAGING"
tolerations: []
affinity: {}

nameOverride: ""
fullnameOverride: ""

lifecycle: {}
  # preStop:
  #   exec:
  #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
  # postStart:
  #   exec:
  #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
